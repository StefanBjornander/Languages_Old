-define(DELAY(X),fun()->X end).
-define(FORCE(X),(X)()).
-define(LET(X,E,E2),eqc_gen:bind(E,fun(X)->E2 end)).
-define(SIZED(S,G),eqc_gen:sized(fun(S)->G end)).
-define(SUCHTHAT(X,G,P),eqc_gen:suchthat(G,fun(X)->P end)).
-define(SUCHTHATMAYBE(X,G,P),eqc_gen:suchthatmaybe(G,fun(X)->P end)).
-define(SHRINK(G,Gs),eqc_gen:shrinkwith(G,?DELAY(Gs))).
-define(LETSHRINK(Es,Gs,E), eqc_gen:bind(Gs,fun(Es) -> eqc_gen:shrinkwith(E,?DELAY(Es)) end)).
-define(SHRINKWHILE(X,G,P),eqc_gen:shrinkwhile(G,fun (X)->P end)).
-define(LAZY(G),eqc_gen:lazy(?DELAY(G))).
-define(IMPLIES(Pre,Prop),eqc:implies(Pre,?DELAY(Prop))).
-define(FORALL(X,Gen,Prop),eqc:forall(Gen,fun(X)->Prop end)).
-define(WHENFAIL(Action,Prop),eqc:whenfail(?DELAY(Action),?LAZY(Prop))).
-define(TRAPEXIT(E),eqc:trapexit(?DELAY(E))).
-define(ALWAYS(N,P),eqc:always(N,?DELAY(P))).
-define(SOMETIMES(N,P),eqc:sometimes(N,?DELAY(P))).
